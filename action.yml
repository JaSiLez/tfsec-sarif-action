name: 'Run tfsec with Report upload'
description: 'Run tfsec against terraform code base and upload the sarif output to the github repo'
author: 'JaSilez'

inputs:
  working_directory:
    description: |
      Directory to run the action on, from the repo root.
      Default is . ( root of the repository)
    default: '.'
  report_file:
    description: The path to write the sarif report, defaults to tfsec.report
    default: 'tfsec.report'
  tfvars_file:
    description: The tfvars file to use for the scan
  tfsec_version:
    description: The version of tfsec to use for the scan, defaults to latest
    default: latest
outputs:
  tfsec-return-code:
    description: 'tfsec command return code'
runs:
  using: "composite"
  steps:
    - run: |
        set -x
        if [ -n "$GITHUB_WORKSPACE" ]; then
          cd "$GITHUB_WORKSPACE" || exit
        fi
        VERSION="latest"
        if [ "$INPUT_TFSEC_VERSION" != "latest" ]; then
          VERSION="tags/$INPUT_TFSEC_VERSION"
        fi
        # Download the required tfsec version
        wget -O - -q "$(wget -q https://api.github.com/repos/aquasecurity/tfsec/releases/$VERSION -O - | grep -o -E "https://.+?tfsec-linux-amd64" | head -n1)" >tfsec
        install tfsec /usr/local/bin/tfsec
        if [ -n "$INPUT_TFVARS_FILE" ]; then
          echo "::debug::Using tfvars file $INPUT_TFVARS_FILE"
          TFVARS_OPTION="--tfvars-file $INPUT_TFVARS_FILE"
        fi
        echo {} >$INPUT_REPORT_FILE
        tfsec  --force-all-dirs "$INPUT_WORKING_DIRECTORY" $TFVARS_OPTION 2>&1 | tee -a $INPUT_REPORT_FILE
        tfsec_return="$PIPESTATUS[0]" exit_code=$
        echo ::set-output name=tfsec-return-code::"$tfsec_return"
      shell: bash
      env:
        INPUT_TFSEC_VERSION: "${{ inputs.tfsec_version }}"
        INPUT_WORKING_DIRECTORY: "${{ inputs.working_directory }}"
        INPUT_TFVARS_FILE: "${{ inputs.tfvars_file }}"
        INPUT_REPORT_FILE: "${{ inputs.report_file }}"